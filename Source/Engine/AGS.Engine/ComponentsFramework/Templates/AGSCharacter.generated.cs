

//Generation Time: 8/13/2017 10:20:28 PM
//This class was automatically generated by a T4 template.
//Making manual changes in this class might be overridden if the template will be processed again.
//If you want to add functionality you might be able to do this via another partial class definition for this class.

using System;
using AGS.API;
using AGS.Engine;
using System.Threading.Tasks;
using System.Collections.Generic;
using Autofac;

namespace AGS.Engine
{
    public partial class AGSCharacter : AGSEntity, ICharacter
    {
        private IHasRoomComponent _hasRoom;
        private ISpriteRenderComponent _spriteRender;
        private IAnimationComponent _animationContainer;
        private IInObjectTreeComponent _inObjectTree;
        private IColliderComponent _collider;
        private IVisibleComponent _visibleComponent;
        private IEnabledComponent _enabledComponent;
        private ICustomPropertiesComponent _customPropertiesComponent;
        private IDrawableInfoComponent _drawableInfo;
        private IHotspotComponent _hotspotComponent;
        private IShaderComponent _shaderComponent;
        private ITranslateComponent _translateComponent;
        private IImageComponent _imageComponent;
        private IScaleComponent _scaleComponent;
        private IRotateComponent _rotateComponent;
        private IPixelPerfectComponent _pixelPerfectComponent;
        private IModelMatrixComponent _modelMatrixComponent;
        private IBoundingBoxComponent _boundingBoxComponent;
        private ISayComponent _sayComponent;
        private IWalkComponent _walkComponent;
        private IFaceDirectionComponent _faceDirectionComponent;
        private IOutfitComponent _hasOutfit;
        private IInventoryComponent _hasInventory;
        private IFollowComponent _followComponent;

        public AGSCharacter(string id, Resolver resolver, IOutfit outfit) : base(id, resolver)
        {            
            _hasRoom = AddComponent<IHasRoomComponent>();
            Bind<IHasRoomComponent>(c => _hasRoom = c, _ => {});
            _spriteRender = AddComponent<ISpriteRenderComponent>();
            Bind<ISpriteRenderComponent>(c => _spriteRender = c, _ => { });
            _animationContainer = AddComponent<IAnimationComponent>();
            Bind<IAnimationComponent>(c => _animationContainer = c, _ => {});            
            _inObjectTree = AddComponent<IInObjectTreeComponent>();
            Bind<IInObjectTreeComponent>(c => _inObjectTree = c, _ => {});            
            _collider = AddComponent<IColliderComponent>();
            Bind<IColliderComponent>(c => _collider = c, _ => {});            
            _visibleComponent = AddComponent<IVisibleComponent>();
            Bind<IVisibleComponent>(c => _visibleComponent = c, _ => {});            
            _enabledComponent = AddComponent<IEnabledComponent>();
            Bind<IEnabledComponent>(c => _enabledComponent = c, _ => {});            
            _customPropertiesComponent = AddComponent<ICustomPropertiesComponent>();
            Bind<ICustomPropertiesComponent>(c => _customPropertiesComponent = c, _ => {});            
            _drawableInfo = AddComponent<IDrawableInfoComponent>();
            Bind<IDrawableInfoComponent>(c => _drawableInfo = c, _ => {});            
            _hotspotComponent = AddComponent<IHotspotComponent>();
            Bind<IHotspotComponent>(c => _hotspotComponent = c, _ => {});            
            _shaderComponent = AddComponent<IShaderComponent>();
            Bind<IShaderComponent>(c => _shaderComponent = c, _ => {});            
            _translateComponent = AddComponent<ITranslateComponent>();
            Bind<ITranslateComponent>(c => _translateComponent = c, _ => {});            
            _imageComponent = AddComponent<IImageComponent>();
            Bind<IImageComponent>(c => _imageComponent = c, _ => {});            
            _scaleComponent = AddComponent<IScaleComponent>();
            Bind<IScaleComponent>(c => _scaleComponent = c, _ => {});            
            _rotateComponent = AddComponent<IRotateComponent>();
            Bind<IRotateComponent>(c => _rotateComponent = c, _ => {});            
            _pixelPerfectComponent = AddComponent<IPixelPerfectComponent>();
            Bind<IPixelPerfectComponent>(c => _pixelPerfectComponent = c, _ => {});            
            _modelMatrixComponent = AddComponent<IModelMatrixComponent>();
            Bind<IModelMatrixComponent>(c => _modelMatrixComponent = c, _ => {});            
            _boundingBoxComponent = AddComponent<IBoundingBoxComponent>();
            Bind<IBoundingBoxComponent>(c => _boundingBoxComponent = c, _ => {});            
            _faceDirectionComponent = AddComponent<IFaceDirectionComponent>();
            Bind<IFaceDirectionComponent>(c => _faceDirectionComponent = c, _ => {});            
            _hasOutfit = AddComponent<IOutfitComponent>();
            Bind<IOutfitComponent>(c => _hasOutfit = c, _ => {});            
            _hasInventory = AddComponent<IInventoryComponent>();
            Bind<IInventoryComponent>(c => _hasInventory = c, _ => {});            
            _followComponent = AddComponent<IFollowComponent>();
            Bind<IFollowComponent>(c => _followComponent = c, _ => {});
			beforeInitComponents(resolver, outfit);
            InitComponents();
            afterInitComponents(resolver, outfit);
            }

        public string Name { get { return ID; } }
        public bool AllowMultiple { get { return false; } }
        public void Init(IEntity entity) {}

        public override string ToString()
        {
            return $"{ID ?? ""} ({GetType().Name})";
        }

        partial void beforeInitComponents(Resolver resolver, IOutfit outfit);
		partial void afterInitComponents(Resolver resolver, IOutfit outfit);

        #region IHasRoom implementation

        public IRoom Room 
        {  
            get { return _hasRoom.Room; } 
        }

        public IRoom PreviousRoom 
        {  
            get { return _hasRoom.PreviousRoom; } 
        }

        public IBlockingEvent OnRoomChanged 
        {  
            get { return _hasRoom.OnRoomChanged; } 
        }

        #endregion

        #region ISpriteRender implementation

        public ISprite CurrentSprite
        {
            get { return _spriteRender.CurrentSprite; }
        }

        public ISpriteProvider SpriteProvider
        {
            get { return _spriteRender.SpriteProvider; }
            set { _spriteRender.SpriteProvider = value; }
        }

        public Boolean DebugDrawPivot
        {
            get { return _spriteRender.DebugDrawPivot; }
            set { _spriteRender.DebugDrawPivot = value; }
        }

        public IBorderStyle Border
        {
            get { return _spriteRender.Border; }
            set { _spriteRender.Border = value; }
        }

        #endregion

        #region IAnimationContainer implementation

        public IAnimation Animation 
        {  
            get { return _animationContainer.Animation; } 
        }

        public IBlockingEvent OnAnimationStarted 
        {  
            get { return _animationContainer.OnAnimationStarted; } 
        }

        public void StartAnimation(IAnimation animation)
        {
            _animationContainer.StartAnimation(animation);
        }

        public AnimationCompletedEventArgs Animate(IAnimation animation)
        {
            return _animationContainer.Animate(animation);
        }

        public Task<AnimationCompletedEventArgs> AnimateAsync(IAnimation animation)
        {
            return _animationContainer.AnimateAsync(animation);
        }

        #endregion

        #region IInObjectTree implementation

        #endregion

        #region IInTree<IObject> implementation

        public ITreeNode<IObject> TreeNode 
        {  
            get { return _inObjectTree.TreeNode; } 
        }

        #endregion

        #region ICollider implementation

        public Nullable<PointF> CenterPoint 
        {  
            get { return _collider.CenterPoint; } 
        }

		public Boolean CollidesWith(Single x, Single y, IViewport viewport)
		{
			return _collider.CollidesWith(x, y, viewport);
		}

        #endregion

        #region IVisibleComponent implementation

        public Boolean Visible 
        {  
            get { return _visibleComponent.Visible; }  
            set { _visibleComponent.Visible = value; } 
        }

        public Boolean UnderlyingVisible 
        {  
            get { return _visibleComponent.UnderlyingVisible; } 
        }

        #endregion

        #region IEnabledComponent implementation

        public Boolean Enabled 
        {  
            get { return _enabledComponent.Enabled; }  
            set { _enabledComponent.Enabled = value; } 
        }

		public Boolean ClickThrough
		{
			get { return _enabledComponent.ClickThrough; }
			set { _enabledComponent.ClickThrough = value; }
		}

        public Boolean UnderlyingEnabled 
        {  
            get { return _enabledComponent.UnderlyingEnabled; } 
        }

		#endregion

		#region ICustomPropertiesComponent implementation

		public ICustomProperties Properties 
        {  
            get { return _customPropertiesComponent.Properties; } 
        }

        #endregion

        #region IDrawableInfo implementation

        public IRenderLayer RenderLayer 
        {  
            get { return _drawableInfo.RenderLayer; }  
            set { _drawableInfo.RenderLayer = value; } 
        }

        public Boolean IgnoreViewport 
        {  
            get { return _drawableInfo.IgnoreViewport; }  
            set { _drawableInfo.IgnoreViewport = value; } 
        }

        public Boolean IgnoreScalingArea 
        {  
            get { return _drawableInfo.IgnoreScalingArea; }  
            set { _drawableInfo.IgnoreScalingArea = value; } 
        }

        #endregion

        #region IHotspotComponent implementation

        public IInteractions Interactions 
        {  
            get { return _hotspotComponent.Interactions; } 
        }

        public Nullable<PointF> WalkPoint 
        {  
            get { return _hotspotComponent.WalkPoint; }  
            set { _hotspotComponent.WalkPoint = value; } 
        }

        public String Hotspot 
        {  
            get { return _hotspotComponent.Hotspot; }  
            set { _hotspotComponent.Hotspot = value; } 
        }

        #endregion

        #region IShaderComponent implementation

        public IShader Shader 
        {  
            get { return _shaderComponent.Shader; }  
            set { _shaderComponent.Shader = value; } 
        }

        #endregion

        #region ITranslateComponent implementation

        #endregion

        #region ITranslate implementation

        public Single X 
        {  
            get { return _translateComponent.X; }  
            set { _translateComponent.X = value; } 
        }

        public Single Y 
        {  
            get { return _translateComponent.Y; }  
            set { _translateComponent.Y = value; } 
        }

        public Single Z 
        {  
            get { return _translateComponent.Z; }  
            set { _translateComponent.Z = value; } 
        }

        public ILocation Location
        {
            get { return _translateComponent.Location; }
            set { _translateComponent.Location = value; }
        }

        #endregion

        #region IImageComponent implementation

        #endregion

        #region IHasImage implementation

        public Byte Opacity 
        {  
            get { return _imageComponent.Opacity; }  
            set { _imageComponent.Opacity = value; } 
        }

        public Color Tint 
        {  
            get { return _imageComponent.Tint; }  
            set { _imageComponent.Tint = value; } 
        }

        public PointF Pivot 
        {  
            get { return _imageComponent.Pivot; }  
            set { _imageComponent.Pivot = value; } 
        }

        public IImage Image 
        {  
            get { return _imageComponent.Image; }  
            set { _imageComponent.Image = value; } 
        }

        public IImageRenderer CustomRenderer 
        {  
            get { return _imageComponent.CustomRenderer; }  
            set { _imageComponent.CustomRenderer = value; } 
        }

        #endregion

        #region IScaleComponent implementation

        #endregion

        #region IScale implementation

        public Single Height 
        {  
            get { return _scaleComponent.Height; } 
        }

        public Single Width 
        {  
            get { return _scaleComponent.Width; } 
        }

        public Single ScaleX 
        {  
            get { return _scaleComponent.ScaleX; }
            set { _scaleComponent.ScaleX = value; }
        }

        public Single ScaleY 
        {  
            get { return _scaleComponent.ScaleY; }
            set { _scaleComponent.ScaleY = value; }
        }

        public PointF Scale
        {
            get { return _scaleComponent.Scale; }
            set { _scaleComponent.Scale = value; }
        }

        public SizeF BaseSize 
        {  
            get { return _scaleComponent.BaseSize; }
            set { _scaleComponent.BaseSize = value; }
        }

        public void ResetScale()
        {
            _scaleComponent.ResetScale();
        }

        public void ResetScale(Single initialWidth, Single initialHeight)
        {
            _scaleComponent.ResetScale(initialWidth, initialHeight);
        }

        public void ScaleTo(Single width, Single height)
        {
            _scaleComponent.ScaleTo(width, height);
        }

        public void FlipHorizontally()
        {
            _scaleComponent.FlipHorizontally();
        }

        public void FlipVertically()
        {
            _scaleComponent.FlipVertically();
        }

        #endregion

        #region IRotateComponent implementation

        #endregion

        #region IRotate implementation

        public Single Angle 
        {  
            get { return _rotateComponent.Angle; }  
            set { _rotateComponent.Angle = value; } 
        }

        #endregion

        #region IPixelPerfectComponent implementation

        #endregion

        #region IPixelPerfectCollidable implementation

        public IArea PixelPerfectHitTestArea 
        {  
            get { return _pixelPerfectComponent.PixelPerfectHitTestArea; } 
        }

        public void PixelPerfect(Boolean pixelPerfect)
        {
            _pixelPerfectComponent.PixelPerfect(pixelPerfect);
        }

        #endregion

        #region IModelMatrixComponent implementation

        public IBlockingEvent OnMatrixChanged 
        {  
            get { return _modelMatrixComponent.OnMatrixChanged; } 
        }

        public ref ModelMatrices GetModelMatrices()
        {
            return ref _modelMatrixComponent.GetModelMatrices();
        }

        public ILockStep ModelMatrixLockStep
        {
            get { return _modelMatrixComponent.ModelMatrixLockStep; }
        }

        #endregion

        #region IBoundingBoxComponent implementation

        public IBlockingEvent OnBoundingBoxesChanged
        {
            get { return _boundingBoxComponent.OnBoundingBoxesChanged; }
        }

        public AGSBoundingBoxes GetBoundingBoxes(IViewport viewport)
        {
            return _boundingBoxComponent.GetBoundingBoxes(viewport);
        }

        public ILockStep BoundingBoxLockStep
        {
            get { return _boundingBoxComponent.BoundingBoxLockStep; }
        }

        #endregion

        #region ISayBehavior implementation

        public ISayConfig SpeechConfig 
        {  
            get { return _sayComponent.SpeechConfig; } 
        }

        public IBlockingEvent<BeforeSayEventArgs> OnBeforeSay 
        {  
            get { return _sayComponent.OnBeforeSay; } 
        }

        public void Say(String text)
        {
            _sayComponent.Say(text);
        }

        public Task SayAsync(String text)
        {
            return _sayComponent.SayAsync(text);
        }

        #endregion

        #region IWalkBehavior implementation

        public PointF WalkStep 
        {  
            get { return _walkComponent.WalkStep; }  
            set { _walkComponent.WalkStep = value; } 
        }

        public Boolean AdjustWalkSpeedToScaleArea 
        {  
            get { return _walkComponent.AdjustWalkSpeedToScaleArea; }  
            set { _walkComponent.AdjustWalkSpeedToScaleArea = value; } 
        }

        public Boolean MovementLinkedToAnimation 
        {  
            get { return _walkComponent.MovementLinkedToAnimation; }  
            set { _walkComponent.MovementLinkedToAnimation = value; } 
        }

        public Boolean IsWalking 
        {  
            get { return _walkComponent.IsWalking; } 
        }

        public ILocation WalkDestination 
        {  
            get { return _walkComponent.WalkDestination; } 
        }

        public Boolean DebugDrawWalkPath 
        {  
            get { return _walkComponent.DebugDrawWalkPath; }  
            set { _walkComponent.DebugDrawWalkPath = value; } 
        }

        public Task<Boolean> WalkAsync(ILocation location)
        {
            return _walkComponent.WalkAsync(location);
        }

        public Task StopWalkingAsync()
        {
            return _walkComponent.StopWalkingAsync();
        }

        public void PlaceOnWalkableArea()
        {
            _walkComponent.PlaceOnWalkableArea();
        }

        #endregion

        #region IFaceDirectionBehavior implementation

        public Direction Direction 
        {  
            get { return _faceDirectionComponent.Direction; } 
        }

        public IDirectionalAnimation CurrentDirectionalAnimation 
        {  
            get { return _faceDirectionComponent.CurrentDirectionalAnimation; }  
            set { _faceDirectionComponent.CurrentDirectionalAnimation = value; } 
        }

        public void FaceDirection(Direction direction)
        {
            _faceDirectionComponent.FaceDirection(direction);
        }

        public Task FaceDirectionAsync(Direction direction)
        {
            return _faceDirectionComponent.FaceDirectionAsync(direction);
        }

        public void FaceDirection(IObject obj)
        {
            _faceDirectionComponent.FaceDirection(obj);
        }

        public Task FaceDirectionAsync(IObject obj)
        {
            return _faceDirectionComponent.FaceDirectionAsync(obj);
        }

        public void FaceDirection(Single x, Single y)
        {
            _faceDirectionComponent.FaceDirection(x, y);
        }

        public Task FaceDirectionAsync(Single x, Single y)
        {
            return _faceDirectionComponent.FaceDirectionAsync(x, y);
        }

        public void FaceDirection(Single fromX, Single fromY, Single toX, Single toY)
        {
            _faceDirectionComponent.FaceDirection(fromX, fromY, toX, toY);
        }

        public Task FaceDirectionAsync(Single fromX, Single fromY, Single toX, Single toY)
        {
            return _faceDirectionComponent.FaceDirectionAsync(fromX, fromY, toX, toY);
        }

        #endregion

        #region IHasOutfit implementation

        public IOutfit Outfit 
        {  
            get { return _hasOutfit.Outfit; }  
            set { _hasOutfit.Outfit = value; } 
        }

        #endregion

        #region IHasInventory implementation

        public IInventory Inventory 
        {  
            get { return _hasInventory.Inventory; }  
            set { _hasInventory.Inventory = value; } 
        }

        #endregion

        #region IFollowBehavior implementation

        public IObject TargetBeingFollowed 
        {  
            get { return _followComponent.TargetBeingFollowed; } 
        }

        public void Follow(IObject obj, IFollowSettings settings)
        {
            _followComponent.Follow(obj, settings);
        }

        #endregion
    }
}

